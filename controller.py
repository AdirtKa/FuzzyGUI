import numpy as np
import matplotlib.pyplot as plt
from ui_main import FuzzyTipUI
from fuzzy_system import build_system
import skfuzzy as fuzz


class FuzzyTipController(FuzzyTipUI):
    def __init__(self):
        super().__init__()

        self.calc_button.clicked.connect(self.calculate_tip)
        self.graph_button.clicked.connect(self.show_graphs)
        self.cuts_button.clicked.connect(self.show_tip_cuts)  # üî• –Ω–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞

        self.last_system = None

    def calculate_tip(self):
        food_score = self.food_spin.value()
        service_score = self.service_spin.value()
        method = self.method_combo.currentText()

        tipping = build_system(method)
        tipping.input['food'] = food_score
        tipping.input['service'] = service_score
        tipping.compute()

        result = tipping.output['tip']
        self.result_label.setText(f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —á–∞–µ–≤—ã–µ: {result:.2f}%")

        self.last_system = tipping

    def show_graphs(self):
        if self.last_system is None:
            self.result_label.setText("–°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —á–∞–µ–≤—ã–µ!")
            return

        antecedents = {ant.label: ant for ant in self.last_system.ctrl.antecedents}
        consequents = {con.label: con for con in self.last_system.ctrl.consequents}

        food = antecedents['food']
        service = antecedents['service']
        tip_var = consequents['tip']

        import matplotlib.pyplot as plt
        fig, axes = plt.subplots(3, 1, figsize=(8, 10))

        # --- –ï–¥–∞ ---
        for name, term in food.terms.items():
            axes[0].plot(food.universe, term.mf, label=name)
        food_val = self.food_spin.value()
        axes[0].axvline(food_val, color='red', linestyle='--', label=f'–û—Ü–µ–Ω–∫–∞ –µ–¥—ã = {food_val}')
        axes[0].set_title("–ï–¥–∞")
        axes[0].set_xlabel("–û—Ü–µ–Ω–∫–∞ (1-10)")
        axes[0].set_ylabel("–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å")
        axes[0].legend()
        axes[0].grid(True)

        # --- –°–µ—Ä–≤–∏—Å ---
        for name, term in service.terms.items():
            axes[1].plot(service.universe, term.mf, label=name)
        service_val = self.service_spin.value()
        axes[1].axvline(service_val, color='red', linestyle='--', label=f'–û—Ü–µ–Ω–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ = {service_val}')
        axes[1].set_title("–°–µ—Ä–≤–∏—Å")
        axes[1].set_xlabel("–û—Ü–µ–Ω–∫–∞ (1-10)")
        axes[1].set_ylabel("–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å")
        axes[1].legend()
        axes[1].grid(True)

        # --- –ß–∞–µ–≤—ã–µ ---
        for name, term in tip_var.terms.items():
            axes[2].plot(tip_var.universe, term.mf, label=name)
        result = self.last_system.output['tip']
        axes[2].axvline(result, color='red', linestyle='--', label=f'–ß–∞–µ–≤—ã–µ = {result:.2f}%')
        axes[2].set_title("–ß–∞–µ–≤—ã–µ")
        axes[2].set_xlabel("–ü—Ä–æ—Ü–µ–Ω—Ç (%)")
        axes[2].set_ylabel("–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å")
        axes[2].legend()
        axes[2].grid(True)

        plt.tight_layout()
        plt.show()

    def show_tip_cuts(self):
        if self.last_system is None:
            self.result_label.setText("–°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ —á–∞–µ–≤—ã–µ!")
            return

        # --- 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        antecedents = {ant.label: ant for ant in self.last_system.ctrl.antecedents}
        consequents = {con.label: con for con in self.last_system.ctrl.consequents}

        food = antecedents['food']
        service = antecedents['service']
        tip_var = consequents['tip']

        x = tip_var.universe
        mf = tip_var.terms  # {'low': Term, 'medium': Term, 'high': Term}

        # --- 2. –ë–µ—Ä—ë–º –≤—Ö–æ–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        food_val = self.food_spin.value()
        service_val = self.service_spin.value()

        # --- 3. –§–∞–∑–∑–∏—Ñ–∏–∫–∞—Ü–∏—è (—Å—Ç–µ–ø–µ–Ω–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–æ–≤)
        Œº_food_bad = fuzz.interp_membership(food.universe, food.terms['bad'].mf, food_val)
        Œº_food_good = fuzz.interp_membership(food.universe, food.terms['good'].mf, food_val)

        Œº_serv_poor = fuzz.interp_membership(service.universe, service.terms['poor'].mf, service_val)
        Œº_serv_avg = fuzz.interp_membership(service.universe, service.terms['average'].mf, service_val)
        Œº_serv_exc = fuzz.interp_membership(service.universe, service.terms['excellent'].mf, service_val)

        # --- 4. –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –ú–∞–º–¥–∞–Ω–∏
        # Rule1: poor OR bad ‚Üí low
        act_low = max(Œº_serv_poor, Œº_food_bad)

        # Rule2: average ‚Üí medium
        act_medium = Œº_serv_avg

        # Rule3: excellent AND good ‚Üí high
        act_high = min(Œº_serv_exc, Œº_food_good)

        # --- 5. –£—Å–µ—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ç–µ—Ä–º–æ–≤
        cut_low = np.fmin(mf['low'].mf, act_low)
        cut_medium = np.fmin(mf['medium'].mf, act_medium)
        cut_high = np.fmin(mf['high'].mf, act_high)

        # --- 6. –ê–≥—Ä–µ–≥–∞—Ü–∏—è
        aggregated = np.fmax(cut_low, np.fmax(cut_medium, cut_high))

        # --- 7. –î–µ—Ñ–∞–∑–∑–∏—Ñ–∏–∫–∞—Ü–∏—è (—Ü–µ–Ω—Ç—Ä —Ç—è–∂–µ—Å—Ç–∏)
        centroid = np.sum(x * aggregated) / np.sum(aggregated)

        # --- 8. –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫
        import matplotlib.pyplot as plt
        plt.figure(figsize=(8, 5))

        # –ò—Å—Ö–æ–¥–Ω—ã–µ –∫—Ä–∏–≤—ã–µ
        for name, term in mf.items():
            plt.plot(x, term.mf, '--', label=f"{name} (–∏—Å—Ö–æ–¥–Ω.)")

        # –°—Ä–µ–∑—ã
        plt.fill_between(x, 0, cut_low, alpha=0.4, color="blue", label=f"low (—Å—Ä–µ–∑, {act_low:.2f})")
        plt.fill_between(x, 0, cut_medium, alpha=0.4, color="green", label=f"medium (—Å—Ä–µ–∑, {act_medium:.2f})")
        plt.fill_between(x, 0, cut_high, alpha=0.4, color="red", label=f"high (—Å—Ä–µ–∑, {act_high:.2f})")

        # –ò—Ç–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        result = self.last_system.output['tip']
        plt.axvline(result, color='red', linestyle='--', label=f'–í—ã—Ö–æ–¥ (defuzz) = {result:.2f}%')

        plt.title("–ß–∞–µ–≤—ã–µ ‚Äì —É—Å–µ—á—ë–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ (–ú–∞–º–¥–∞–Ω–∏)")
        plt.xlabel("–ß–∞–µ–≤—ã–µ (%)")
        plt.ylabel("–ü—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å")
        plt.legend()
        plt.grid(True)
        plt.show()


